- You can assign value and use that in a condition together.
        Eg:-
        while((ch = getchar()) != EOF)

- EOF can be input using Ctrl + D(in Linux). What happens is that no input is passed and getchar() return
-1 which is equal to EOF in stdlib.h

- All variables that are declared in a program resides in the stack. Anything that is dynamically 
allocated is stored in the heap.

- A literal can also be used in printf instead of a variable. 

- ++a will first increment and then use the value, a++ will first evaluate a and then increment

- To check memory used by a program that is running can be done using the following

        Checked memory allocation by examining 
        cat /proc/<pid>/maps
        The memory address for the malloc was in the heap and the local variable was in the stack.

- You can assign values together like this
        nl = nc = nw = 0;

- Format with leading zeroes using the following syntax
        printf("%05d",5);        

- When you have many conditions with || or &&, it will execute from left to right

- Wall option should be always used while compiling C program in gcc

- Type of basic variable types in C
        - unsigned & signed
                - char
                - int
                        - short
                        - long
                - float
                        - short
                        - long
                - double
                        - short
                        - long
        extern -> for global
                  Should declare the variable properly aftwards in the file to use
        static -> Keep value of variables between multiple calls
                  Use a variable within a file, when using multiple files
        constant -> Compiler stops change of value (this is what we call immutable)
        volatile -> To stop compiler from optimizing the code while compiling. i.e. in some 
                    cases the compiler understands that a variable will never change during 
                    execution. So it might optimize and store the value in a different location 
                    /register to reuse during execution. While multithreading or hardware input 
                    is expected this can cause issues. That is when you should use volatile.

 - '' and "" are different. '' is for single character and "" is for character array

 - Dont mistake & with && and | with ||
        ~ for Not
        >> and << to shift the bits

 - Return type of (condition)? Statement1:Statement2 is generally the bigger of two. If one is int and the 
 other is float. The return value is float. 

 - Learned that a variable can be declared within a if block and have the scope within only the if block
 
 - char *p = "hello";
   char q[] = "hello";
   char *t = q;
   Both look almost the same. But the pointer one is immutable. But if a pointer has address of a string
   then it is mutable.
   p[0] = 'z'; is not possible (undefined behaviour)
   q[0] = 'z'; is possible
   t[0] = 'z'; is possible

 - gcc -E source.c to ust expand the source by processing only the defines and includes